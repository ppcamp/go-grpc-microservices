// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user_password

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPasswordServiceClient is the client API for UserPasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPasswordServiceClient interface {
	Create(ctx context.Context, in *UserPasswordInput, opts ...grpc.CallOption) (*empty.Empty, error)
	Recover(ctx context.Context, in *UserPasswordInput, opts ...grpc.CallOption) (*empty.Empty, error)
}

type userPasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPasswordServiceClient(cc grpc.ClientConnInterface) UserPasswordServiceClient {
	return &userPasswordServiceClient{cc}
}

func (c *userPasswordServiceClient) Create(ctx context.Context, in *UserPasswordInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/UserPasswordService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPasswordServiceClient) Recover(ctx context.Context, in *UserPasswordInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/UserPasswordService/Recover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPasswordServiceServer is the server API for UserPasswordService service.
// All implementations must embed UnimplementedUserPasswordServiceServer
// for forward compatibility
type UserPasswordServiceServer interface {
	Create(context.Context, *UserPasswordInput) (*empty.Empty, error)
	Recover(context.Context, *UserPasswordInput) (*empty.Empty, error)
	mustEmbedUnimplementedUserPasswordServiceServer()
}

// UnimplementedUserPasswordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPasswordServiceServer struct {
}

func (UnimplementedUserPasswordServiceServer) Create(context.Context, *UserPasswordInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserPasswordServiceServer) Recover(context.Context, *UserPasswordInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}
func (UnimplementedUserPasswordServiceServer) mustEmbedUnimplementedUserPasswordServiceServer() {}

// UnsafeUserPasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPasswordServiceServer will
// result in compilation errors.
type UnsafeUserPasswordServiceServer interface {
	mustEmbedUnimplementedUserPasswordServiceServer()
}

func RegisterUserPasswordServiceServer(s grpc.ServiceRegistrar, srv UserPasswordServiceServer) {
	s.RegisterService(&UserPasswordService_ServiceDesc, srv)
}

func _UserPasswordService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPasswordInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPasswordServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserPasswordService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPasswordServiceServer).Create(ctx, req.(*UserPasswordInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPasswordService_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPasswordInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPasswordServiceServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserPasswordService/Recover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPasswordServiceServer).Recover(ctx, req.(*UserPasswordInput))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPasswordService_ServiceDesc is the grpc.ServiceDesc for UserPasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserPasswordService",
	HandlerType: (*UserPasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserPasswordService_Create_Handler,
		},
		{
			MethodName: "Recover",
			Handler:    _UserPasswordService_Recover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user_password.proto",
}
