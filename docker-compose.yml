# We're using database per service, however, until now, we aren't using
# Orchestration-based saga neither Choreography-based saga

version: '3.9'

services:
  ###############
  # Databases
  ###############
  authdb:
    container_name: authdb
    image: postgres:14-alpine
    environment:
      POSTGRES_PASSWORD: somepassword
      POSTGRES_USER: authuser
      POSTGRES_DB: authentication
    ports:
      - 5432:5432
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        reservations:
          memory: 50M
        limits:
          cpus: '0.5'
          memory: 200M

  userdb:
    container_name: userdb
    image: postgres:14-alpine
    environment:
      POSTGRES_PASSWORD: somepassword
      POSTGRES_USER: useruser
      POSTGRES_DB: users
    ports:
      - 5431:5432
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        reservations:
          memory: 50M
        limits:
          cpus: '0.5'
          memory: 200M

  ###############
  # Caching
  ###############
  redis:
    container_name: redis
    image: redis
    ports:
      - 6379:6379
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        reservations:
          memory: 50M
        limits:
          cpus: '0.5'
          memory: 100M

  # redis commander is used to visualize the redis data in an organized way (UI)
  redis-commander:
    container_name: redis-commander
    # hostname: redis
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - 8081:8081
    depends_on:
      - redis
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        reservations:
          memory: 20M
        limits:
          cpus: '0.5'
          memory: 50M

  ###############
  # Services
  ###############
  authentication:
    container_name: authentication
    build:
      context: authentication
      dockerfile: Dockerfile
    environment:
      GRPC_GO_LOG_SEVERITY_LEVEL: info
      GRPC_GO_LOG_VERBOSITY_LEVEL: 2
      APP_PORT: ":9000"
      CACHE_HOST: redis
      DATABASE_HOST: db
      DATABASE_USER: authuser
      DATABASE_PASSWORD: somepassword
      DATABASE_DBNAME: authentication
    ports:
      - 9000:9000
    depends_on:
      - authdb
      - redis
    links:
      - "authdb:db"
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        reservations:
          memory: 50M
        limits:
          cpus: '1.0'
          memory: 100M

  ui:
    container_name: ui
    build:
      context: ui/server
      dockerfile: Dockerfile
    environment:
      APP_PORT: ":9090"
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        reservations:
          memory: 50M
        limits:
          cpus: '1.0'
          memory: 100M

  ###############
  # Proxy
  ###############
  proxy:
    container_name: proxy
    image: envoyproxy/envoy-alpine:v1.21-latest
    ports:
      - 80:80
      - 9901:9901
    volumes:
      - ./proxy/envoy.yaml:/etc/envoy/envoy.yaml
    depends_on:
      - authentication
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        reservations:
          memory: 50M
        limits:
          cpus: '1.5'
          memory: 100M
